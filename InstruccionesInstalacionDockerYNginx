**Cómo se instalan contenedores docker en fedora**

Para crear dos contenedores con Nginx en Fedora y configurar la conexión entre ellos utilizando `ping`, puedes seguir estos pasos:

### Paso 1: Instalar Docker

Si no tienes Docker instalado, primero necesitas instalarlo:

```sh
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io
```

Inicia el servicio Docker y habilítalo para que se inicie al arrancar el sistema:

```sh
sudo systemctl start docker
sudo systemctl enable docker
```

### Paso 2: Crear una red personalizada

Crear una red personalizada para que los contenedores puedan comunicarse entre sí:

```sh
sudo su
docker network create my_network
```

### Paso 3: Crear y ejecutar los contenedores Nginx

Crear y ejecutar los contenedores con nombres `nginx` y `nginx2` en la red personalizada:

```sh
docker run -d --name nginx --network my_network nginx
docker run -d --name nginx2 --network my_network nginx
```

### Paso 4: Verificar la conexión entre los contenedores

Ahora, verifica la conexión entre los contenedores utilizando `ping`. Primero, abre una terminal interactiva en uno de los contenedores:

```sh
docker exec -it nginx bash
```

Dentro del contenedor `nginx`, usa `ping` para verificar la conexión al contenedor `nginx2`:

```sh
ping nginx2
```
Si te aparece el error ping: "command not found" ocurre porque la imagen de Docker que estás utilizando no tiene la herramienta ping instalada.

Para solucionar esto, puedes instalar iputils-ping  (el paquete que contiene la herramienta ping) dentro del contenedor.

```
apt-get update
apt-get install -y iputils-ping
```

### Paso 5: sal del contenedor para hacer revisiones a la red.

Sal del contenedor con "exit":

```
exit
```
### Paso 6: Ejecuta en bash docker ps
```
docker ps
```
este comando ayuda a revisar los contenedores.
### Paso 6:  la conexión, dirección mac y direcciones ip de cada contenedor:

```
docker inspect network my_network
```

